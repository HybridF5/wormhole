#!/bin/bash

for e in "$(dirname $0)/env" "/var/lib/wormhole/bin/env" ; do
    [ -f "$e" ] && source "$e"
done

# Device scaning interval(second)
SCANINTERVAL=1

IMAGE_FILE=user.img

PORT=7127

# is this the first running, means the vm is just created this run is instance creating
is_first=false
# create container or not
is_create=false
is_reboot=false

cd $WORMHOLE_CONFIG_DIR

NEUTRON_CONFIG_BIN=/usr/bin/neutron-agent-config
eval NEUTRON_CONFIG_FILE=$(awk '{FS="="}/^NEUTRON_AGENT_CONFFILE_URL=/{found=$2}END{print found?found:"\"/home/neutron_agent_conf.txt\""}' $NEUTRON_CONFIG_BIN)
NEUTRON_CONFIG_FILE=${NEUTRON_CONFIG_FILE:-/home/neutron_agent_conf.txt}


WORMHOLE_CONFIG_FILE=config

PROJECT_CONFIG_FILE=/etc/wormhole/wormhole.conf

LOG_FILE=/var/log/wormhole/daemon_start.log

TMPDIR=.
[ -w /tmp ] && TMPDIR=/tmp

wormhole_start_bg() {
    pgrep -fl 'python .*/wormhole-api$' >/dev/null || (wormhole-api >/dev/null 2>&1 &)
}

find_data_volume() {
    echo "start fmt mount data disk $(date)"
    user_device=$(readlink -f "$DEVICE_LINK")
    [ -b "$user_device" ]  || {
      # remove the link
      [ -h "$DEVICE_LINK" ] && rm "$DEVICE_LINK"
      echo "scaning host disk:"
      while :; do
         for s in /sys/class/scsi_host/host*/scan; do
             echo "- - -" > "$s"
         done
         user_device=$(lsblk -n -d -o 'NAME,TYPE' | awk '
             $NF=="disk"&&$1~/^x?[a-z]?d?[a-z]$/{
             d="/dev/"$1; for(found=0;"lsblk "d|getline;)found+=$NF=="/";
             if(found)next
             print d;exit}')
         [ -b "$user_device" ] && break
         sleep ${SCANINTERVAL}s
         (((ii+=SCANINTERVAL)%60)) || echo scaning host disk device total $ii seconds...
      done
      lsblk
      ln -sf $user_device $DEVICE_LINK
      echo found data disk $user_device
    }

}

image_downloaded() {
[ -f $IMAGE_DOWNLOADED ]
}

find_bootable() {
    fdisk -l $user_device | awk '/^\/dev\//&&$2=="*"{print $1}'
}

find_root() {
    local MNT=/mnt
    lsblk -r -n $user_device | while read p d ; do
        mount /dev/$p $MNT 2>/dev/null && {
            g=true
            for d in  $MNT/{home,boot,etc,var,opt,dev} ; do
                [ -h "$d" ] && d=$(readlink -f $d)
                [ -d "$d" ] || { g=false; break; }
            done
            $g && { umount $MNT;echo /dev/$p;break; }
            umount $MNT
        }
    done

    # mount $bootable $MNT
    # for grub in {/boot,}/{grub2/grub.cfg,grub/{grub.cfg,menu.lst}} ; do
    #    [ -f "$MNT/$grub" ] && break
    # done

    #umount $MNT
}

check_image_first() {
    [ -f "$IMAGE_FILE" ] && touch "$IMAGE_DOWNLOADED"
}

# load local image
wait_load_image() {
    # for compatible
    while ! image_downloaded  ; do
        sleep 1
    done

    bootable=$(find_bootable)
    [ -b "$bootable" ] && echo "already convert: bootable $bootable" && return 0
    [ -f $IMAGE_FILE ] && {

        echo found IMAGE $(date)
        echo convert $IMAGE_FILE $user_device
        time qemu-img convert $IMAGE_FILE $user_device && {
            touch "$IMAGE_CONVERTED"
            echo " convert successfully"
        } || {
            echo "convert failed ret code:$?"
            return 2
        }
        is_first=true
        bootable=$(find_bootable)

    }

}


create_start_container() {
    [ -f "$NEED_CREATE_CONTAINER" ] && is_create=true && rm "$NEED_CREATE_CONTAINER"

    [ z$is_create = ztrue -o z$is_reboot = ztrue ]  || return

    while ! netstat -tln|grep :$PORT ;  do sleep .5 ; done
    # create and start container
    python -c "

import json, time
content = open('$WORMHOLE_SETTING_FILE').read()
try: content = content.decode('base64').decode('zlib')
except Exception: pass

setting = json.loads(content)

import wormholeclient as wc
C = wc.client.Client('127.0.0.1')

def create():
  create_extra_fields = ['root_volume_id', 'network_info', 'block_device_info', 'inject_files', 'admin_password']
  create_kws = dict((k, setting.get(k))for k in create_extra_fields)
  ct = C.create_container(setting['image_name'], setting['image_id'], **create_kws)
  while ct['code'] == wc.constants.TASK_DOING: time.sleep(1);ct = C.query_task(ct)

if '$is_create' == 'true':create()

start_fields = ['block_device_info', 'network_info']
start_params = dict((k, setting.get(k))for k in start_fields)
C.start_container(**start_params)"
}

fix_default_gw() {


    local netname=$(basename $(dirname $(echo /sys/class/net/*/device|head -n1)))
    local gateway=$(ip addr show dev $netname | awk '{FS="[/. ]"}sub(/^ +inet /,e){for(;i<32;){j=7-i%8;n+=(i<$5?int($(i/8+1)/2^j%2)*2^j:(i==31)*2^j);++i%8||r=r (r?".":_)n (n=_)};print r;exit}')
    echo ip route replace default via $gateway
}

do_mount() {
    rootfs_path=$(find_root)
    rootfs_path=${rootfs_path:-$bootable}
    echo "try root path $rootfs_path"
    [ -b "$rootfs_path" ] && {
        mount "$rootfs_path" "$MOUNT_PATH"
        echo "mount root $rootfs_path on $MOUNT_PATH"
        ln -sf $rootfs_path $ROOT_DEVICE_LINK
    }
}

check_reboot() {
    [ -f "$REBOOT_IN_CONTAINER" ] && {
        is_reboot=true
        rm "$REBOOT_IN_CONTAINER"
    }
}

exec >> $LOG_FILE 2>&1

echo "============ start wormhole-daemon-start $(date)"

for d in $LINK_DIR $MOUNT_PATH; do
  [ -d "$d" ] || mkdir "$d"
done

vars="NEUTRON_CONFIG_FILE NEUTRON_CONFIG_BIN WORMHOLE_SETTING_FILE WORMHOLE_CONFIG_DIR LINK_DIR IMAGE_FILE"

echo
echo ===== MAIN CONFIG ========
for var in $vars; do
    echo $var = ${!var}
done
echo ==========================
echo

iptables-save | grep $PORT || iptables -A IN_public_allow -p tcp -m tcp --dport $PORT -m conntrack --ctstate NEW -j ACCEPT


bin/wormhole-setting&

check_reboot
check_image_first
fix_default_gw

wormhole_start_bg

find_data_volume
wait_load_image

# mount
do_mount

wait

create_start_container

echo "end wormhole-daemon-start first:${is_first} create:${is_create} is_reboot:${is_reboot} $(date)"
echo
